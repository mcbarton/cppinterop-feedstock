{% set name = "cppinterop" %}
{% set build_number = 4 %}
{% set version = "1.7.0" %}
{% set revision_tag = "v"+version %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/compiler-research/CppInterOp/archive/refs/tags/{{ revision_tag }}.tar.gz
    sha256: 7208cee5da55043b9d121a7f0236ef09daada4a1c517b3bed611530eee325622
    folder: cppinterop

build:
  number: {{ build_number }}
  string: clang{{ (clangdev or "None").split(".")[0] }}_repl_h{{ PKG_HASH }}_{{ build_number }}
  ignore_run_exports:
    - libxml2
    - backtrace
    - libllvm{{ clangdev }}
  run_exports:
    - {{ pin_subpackage(name, max_pin='x.x') }}

requirements:
  build:
    - cmake
    #- clang  # [osx]
    - make  # [unix]
    - ninja  # [win]
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - llvm {{ clangdev }}
    - llvmdev {{ clangdev }}
    - clangdev {{ clangdev }}
    - git-lfs
  host:
    - llvm {{ clangdev }}
    - llvmdev {{ clangdev }}
    - clangdev {{ clangdev }}
    - backtrace  # [unix and x86]
    - libxml2
    - zlib
    - zstd
  run:
    # clang_bootstrap has no run-export
    - libcxx >={{ cxx_compiler_version }}  # [osx]
  run_constrained:
    - llvm {{ clangdev }}
    - llvmdev {{ clangdev }}
    - clangdev {{ clangdev }}

test:
  requires:
    - {{ compiler('cxx') }}
    - cmake
    - ninja
  files:
    - CMakeLists.txt
    - test.cpp
  commands:
    - test -f $PREFIX/lib/libclangCppInterOp${SHLIB_EXT}  # [unix]
    - if not exist %LIBRARY_BIN%\\clangCppInterOp.dll exit 1  # [win]
    # Avoid Bad CPU from cmake when cross-compiling on osx and arm...
    - exit 0  # [build_platform != target_platform]
    - mkdir -p cmake_build_test && pushd cmake_build_test
    - $CXX -xc++ -E -v /dev/null 2>&1 | sed -n -e '/^.include/,${' -e '/^ \/.*/p' -e '}'  # [unix]
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCONDA_PREFIX="$BUILD_PREFIX" -G "Ninja" ..
    - cmake --build . --config Debug -- -v
    - ./cmake_build_test $CXX  # [unix]
    - rm -fr *
    - cmake -DCMAKE_BUILD_TYPE=Release -DCONDA_PREFIX="$BUILD_PREFIX" -G "Ninja" ..
    - cmake --build . --config Release
    - ./cmake_build_test $CXX  # [unix]
    - rm -fr *
    - cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_PREFIX="$BUILD_PREFIX" -G "Ninja" ..
    - cmake --build . --config RelWithDebInfo
    - ./cmake_build_test $CXX  # [unix]
    - popd

about:
  home: https://github.com/compiler-research/CppInterOp
  license: Apache-2.0 WITH LLVM-exception
  license_family: Apache
  license_file: cppinterop/LICENSE.txt
  summary: |
    The CppInterOp library provides a minimalist approach for other languages
    to interoperate with C++ entities.
  description: |
    CppInterOp exposes API from Clang and LLVM in a backward compatibe way.
    The API support downstream tools that utilize interactive C++ by using
    the compiler as a service. That is, embed Clang and LLVM as a libraries
    in their codebases. The API are designed to be minimalistic and aid
    non-trivial tasks such as language interoperability on the fly. In such
    scenarios CppInterOp can be used to provide the necessary introspection
    information to the other side helping the language cross talk.
  doc_url: https://cppinterop.readthedocs.io/en/{{ version }}
  dev_url: https://cppinterop.readthedocs.io/en/{{ version }}/DevelopersDocumentation.html

extra:
  recipe-maintainers:
    - JohanMabille
    - alexander-penev
    - vgvassilev
